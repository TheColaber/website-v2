<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developing on Scratch Addons</title>
    <link>/docs/developing/</link>
    <description>Recent content in Developing on Scratch Addons</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="/docs/developing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About Persistant Scripts</title>
      <link>/docs/developing/about-persistent-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/developing/about-persistent-scripts/</guid>
      <description>What are they? Persistent scripts allow you to run JavaScript in the background! They&amp;rsquo;re awesome to notify the user about stuff, or preload data so it&amp;rsquo;s ready when the user needs it.
How do I add a persistent script? Make sure to refresh Scratch Addons from chrome://extensions after doing any changes to your addon.
Go to the manifest of your addon (addon.json) and add a property called &amp;quot;persistent_scripts&amp;quot;.
This property must be an array, even if your addon will only use one persistent script.</description>
    </item>
    
    <item>
      <title>About Userscripts</title>
      <link>/docs/developing/about-userscripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/developing/about-userscripts/</guid>
      <description>What are they? Userscripts allow you to run code along Scratch pages - you can do stuff like add buttons, enhance the Scratch editor, or anything you can imagine.
How do I add a userscript? Make sure to refresh Scratch Addons from chrome://extensions after doing any changes to your addon.
Go to the manifest of your addon (addon.json) and add a property called userscripts&amp;quot;.
This property must be an array.</description>
    </item>
    
    <item>
      <title>About Userstyles</title>
      <link>/docs/developing/about-userstyles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/developing/about-userstyles/</guid>
      <description>What are they? Userstyles allows you to inject CSS on the Scratch website - useful to make the buttons you add with userscripts colorful, or to customize native Scratch element.
How do I add a userstyle? Make sure to refresh Scratch Addons from chrome://extensions after doing any changes to your addon.
Go to the manifest of your addon (addon.json) and add a property called &amp;quot;userstyles&amp;quot;.
This property must be an array.</description>
    </item>
    
    <item>
      <title>Addon APIs Reference</title>
      <link>/docs/developing/addon-apis-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/developing/addon-apis-reference/</guid>
      <description>This API can be used within your addons, which can provide useful things such as access to the real blockly, Scratch&amp;rsquo;s vm, etc.
Table of contents  addon.self  Getters Events   addon.settings  Functions Events   addon.auth  Getters Events   addon.account  Functions   addon.tab  Sub-APIs Getters Functions Events   addon.notifications  Functions Events   addon.badge  Getters &amp;amp; setters    addon.</description>
    </item>
    
    <item>
      <title>addon.tab.traps</title>
      <link>/docs/developing/addon.tab.traps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/developing/addon.tab.traps/</guid>
      <description>This page is out of date and is in need of a rewrite. If you know anything about traps, please contribute! addon.tab.traps is a public API for userscripts that can be used to obtain objects that are not otherwise available. The actual traps are coded at prototype-handler.
They share some APIs with &amp;ldquo;Once&amp;rdquo; traps, but is very different and is documented at Fake redux state separately.
Examples editor-stepping addon shows how to manipulate Thread object trapped.</description>
    </item>
    
    <item>
      <title>Design</title>
      <link>/docs/developing/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/developing/design/</guid>
      <description>Icons We use iconify UIL (Unicons) icons. See them at https://iconify.design/icon-sets/uil/. Please only use icons from this set unless you have explicit permission to use another set. When adding an icon, download it to /images/icons/iconname.svg.
Colors Our color theme is orange #ff7b26 and white #fff. These colors make up the top bar on our webpages, as well as some other elements.
For our (default) dark theme, our main colors are #2a2a2a #222 #000.</description>
    </item>
    
    <item>
      <title>How to add an icon to a setting name</title>
      <link>/docs/developing/how-to-add-an-icon-to-a-setting-name/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/developing/how-to-add-an-icon-to-a-setting-name/</guid>
      <description>To add an icon to a setting name without causing crashes,
 Make sure the icon file name does not contain hyphens Write @ICONFILENAME.svg setting name on addon.json Add ICONFILENAME.svg at /images/icons/ if missing Edit /background/load-addon-manifests.js to add iconfilenameIcon: &amp;quot;@ICONFILENAME.svg&amp;quot;, Edit /addons/scratch-notifier/background.js for Scratch Notifier settings  </description>
    </item>
    
    <item>
      <title>Installing Scratch Addons</title>
      <link>/docs/developing/installing-scratch-addons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/developing/installing-scratch-addons/</guid>
      <description>Go to the Scratch Addons github repo and find the download code button:  2: Click it and select &amp;lsquo;Download ZIP:
3: Once you have downloaded the zip file extract it to a new folder. Then go to your Chrome browser extension settings or Firefox addons settings. Chrome Only: Once you&amp;rsquo;re there click the toggle next to &amp;lsquo;Developer mode&amp;rsquo; this turns on developer mode and allows you to install the addon from a file, instead of from the chrome webstore:</description>
    </item>
    
    <item>
      <title>Redux</title>
      <link>/docs/developing/redux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/developing/redux/</guid>
      <description>Scratch Addons supports getting and modifying Redux state!
Keep in mind  Redux only applies on new page (ones with new navigation bar, including editor) Some extensions conflict with ScratchAddons&#39; Redux feature. Do not use this when unnecessary. We expect readers to have basic knowledge on Redux and Scratch&amp;rsquo;s reducers.  Get redux state addon.tab.redux.state stores current Redux state. For example, to get message count: addon.tab.redux.state.messageCount.messageCount
Events addon.tab.redux.addEventListener(&amp;quot;statechanged&amp;quot;, callback) to add event listeners for state changes.</description>
    </item>
    
    <item>
      <title>The addon manifest (addon.json)</title>
      <link>/docs/developing/the-addon-manifest-addon.json/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/developing/the-addon-manifest-addon.json/</guid>
      <description>Addons are located inside the addons folder. Each addon is inside its own folder as well. In order to tell the addon loader how the addon plans to work, addons use a standard addon.json file located at the root of the addon&amp;rsquo;s folder.
Table of contents  name (string, required) description (string, required) tags (array, required) permissions (array) persistentScripts (array) userscripts and userstyles (array)  settingMatch (object) runAtComplete (boolean, userscripts only)   settings (object) credits (object) enabledByDefault (boolean) info (array) traps (boolean) presets (object) l10n (boolean) libraries (array) popup (object) dynamicDisable (boolean) dynamicEnable (boolean) injectAsStyleElt (boolean) updateUserstylesOnSettingsChange (boolean)  name (string, required) The name of the addon.</description>
    </item>
    
  </channel>
</rss>
